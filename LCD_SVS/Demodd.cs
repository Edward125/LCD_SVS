//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  // Chapter: Develop
  // Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
  public void dev_update_off ()
  {

    // Initialize local and output iconic variables 
    //This procedure sets different update settings to 'off'.
    //This is useful to get the best performance and reduce overhead.
    //
    // dev_update_pc(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    // dev_update_window(...); only in hdevelop


    return;
  }

  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image, ho_GsFilter1, ho_GsFilter2;
    HObject ho_Filter, ho_ImageInvert=null, ho_ImageFFT=null;
    HObject ho_ImageConvol=null, ho_ImageFiltered=null, ho_Rectangle=null;
    HObject ho_ROI=null, ho_ImageMedian=null, ho_ImageSmooth=null;
    HObject ho_Regions=null, ho_ConnectedRegions=null, ho_RegionDilation=null;
    HObject ho_SelectedRegions=null, ho_Contours=null, ho_ContCircle=null;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_Sigma1 = new HTuple(), hv_Sigma2 = new HTuple();
    HTuple hv_ImageFiles = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Radius = new HTuple(), hv_StartPhi = new HTuple();
    HTuple hv_EndPhi = new HTuple(), hv_PointOrder = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_GsFilter1);
    HOperatorSet.GenEmptyObj(out ho_GsFilter2);
    HOperatorSet.GenEmptyObj(out ho_Filter);
    HOperatorSet.GenEmptyObj(out ho_ImageInvert);
    HOperatorSet.GenEmptyObj(out ho_ImageFFT);
    HOperatorSet.GenEmptyObj(out ho_ImageConvol);
    HOperatorSet.GenEmptyObj(out ho_ImageFiltered);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ROI);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_ImageSmooth);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_ContCircle);
    //***********************************************第一 窗口初始化****************************************************
    //关闭已经打开的窗口
    //dev_close_window(...);

    //关闭程序计数器,图形变量更新,窗口图形更新
    dev_update_off();

    //读取一张图像
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "2.bmp");

    //获取图像大小
    hv_Width.Dispose();hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

    //打开新的窗口
    //dev_open_window(...);

    //设置区域填充方式
    HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");

    //设置线宽度
    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);

    //设置输出对象显示颜色数目
    HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 12);


    //***********************************************第二 图像预处理****************************************************
    //优化FFT的速度
    HOperatorSet.OptimizeRftSpeed(hv_Width, hv_Height, "standard");
    hv_Sigma1.Dispose();
    hv_Sigma1 = 10.0;
    hv_Sigma2.Dispose();
    hv_Sigma2 = 2.0;
    //构建高斯滤波器
    ho_GsFilter1.Dispose();
    HOperatorSet.GenGaussFilter(out ho_GsFilter1, hv_Sigma1, hv_Sigma1, 0.0, "none", 
        "rft", hv_Width, hv_Height);
    //构建高斯滤波器
    ho_GsFilter2.Dispose();
    HOperatorSet.GenGaussFilter(out ho_GsFilter2, hv_Sigma2, hv_Sigma2, 0.0, "none", 
        "rft", hv_Width, hv_Height);

    //两个滤波器相减
    ho_Filter.Dispose();
    HOperatorSet.SubImage(ho_GsFilter1, ho_GsFilter2, out ho_Filter, 1, 0);


    //***********************************************第三 开始处理图像****************************************************
    //Image Acquisition 01: Code generated by Image Acquisition 01
    hv_ImageFiles.Dispose();
    hv_ImageFiles = new HTuple();
    if (hv_ImageFiles == null)
      hv_ImageFiles = new HTuple();
    hv_ImageFiles[0] = "1.bmp";
    if (hv_ImageFiles == null)
      hv_ImageFiles = new HTuple();
    hv_ImageFiles[1] = "2.bmp";



    for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ImageFiles.TupleLength()
        ))-1); hv_Index = (int)hv_Index + 1)
    {

      //读取一张图像
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, hv_ImageFiles.TupleSelect(hv_Index));
      }

      //将RGB彩色图转化为灰度图
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.Rgb1ToGray(ho_Image, out ExpTmpOutVar_0);
      ho_Image.Dispose();
      ho_Image = ExpTmpOutVar_0;
      }

      //对灰度图进行反选
      ho_ImageInvert.Dispose();
      HOperatorSet.InvertImage(ho_Image, out ho_ImageInvert);

      //将图像转化为频域图像
      ho_ImageFFT.Dispose();
      HOperatorSet.RftGeneric(ho_ImageInvert, out ho_ImageFFT, "to_freq", "sqrt", 
          "complex", hv_Width);

      //将频域图像和滤波核进行卷积运算
      ho_ImageConvol.Dispose();
      HOperatorSet.ConvolFft(ho_ImageFFT, ho_Filter, out ho_ImageConvol);

      //将频域图像转化为空间域图像
      ho_ImageFiltered.Dispose();
      HOperatorSet.RftGeneric(ho_ImageConvol, out ho_ImageFiltered, "from_freq", 
          "n", "real", hv_Width);

      //创建一个ROI
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, 30, 25, 450, 610);

      //将ROI区域的图像剪切
      ho_ROI.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageFiltered, ho_Rectangle, out ho_ROI);

      //中值滤波
      ho_ImageMedian.Dispose();
      HOperatorSet.MedianImage(ho_ROI, out ho_ImageMedian, "circle", 20, "mirrored");

      //使用高斯核进行图像平滑
      ho_ImageSmooth.Dispose();
      HOperatorSet.SmoothImage(ho_ROI, out ho_ImageSmooth, "gauss", 8);

      //通过阈值分割出缺陷区域
      ho_Regions.Dispose();
      HOperatorSet.Threshold(ho_ImageSmooth, out ho_Regions, -0.0016783, -0.0006434);

      //对缺陷区域进行连通处理
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);

      //对区域进行膨胀操作
      ho_RegionDilation.Dispose();
      HOperatorSet.DilationCircle(ho_ConnectedRegions, out ho_RegionDilation, 5);

      //过滤出指定面积大小的缺陷
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_RegionDilation, out ho_SelectedRegions, "area", 
          "and", 800, 99999);

      //根据区域生成XLD轮廓
      ho_Contours.Dispose();
      HOperatorSet.GenContourRegionXld(ho_SelectedRegions, out ho_Contours, "border");

      //将XLD拟合成圆
      hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
      HOperatorSet.FitCircleContourXld(ho_Contours, "atukey", -1, 2, 0, 5, 2, out hv_Row, 
          out hv_Column, out hv_Radius, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);

      //生成一个圆对象
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ContCircle.Dispose();
      HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_Row, hv_Column, hv_Radius+20, 
          0, 6.28318, "positive", 1);
      }


      //显示图像
      HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);


      //显示圆标记
      HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);

      HDevelopStop();

    }

    ho_Image.Dispose();
    ho_GsFilter1.Dispose();
    ho_GsFilter2.Dispose();
    ho_Filter.Dispose();
    ho_ImageInvert.Dispose();
    ho_ImageFFT.Dispose();
    ho_ImageConvol.Dispose();
    ho_ImageFiltered.Dispose();
    ho_Rectangle.Dispose();
    ho_ROI.Dispose();
    ho_ImageMedian.Dispose();
    ho_ImageSmooth.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_RegionDilation.Dispose();
    ho_SelectedRegions.Dispose();
    ho_Contours.Dispose();
    ho_ContCircle.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
   // hv_WindowHandle.Dispose();
    hv_Sigma1.Dispose();
    hv_Sigma2.Dispose();
    hv_ImageFiles.Dispose();
    hv_Index.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Radius.Dispose();
    hv_StartPhi.Dispose();
    hv_EndPhi.Dispose();
    hv_PointOrder.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

